package fu.swp.evcs.service;

import java.math.BigDecimal;
import java.util.Date;
import java.util.Optional;

import org.springframework.stereotype.Service;

import fu.swp.evcs.dto.CreateGroupRequest;
import fu.swp.evcs.entity.Group;
import fu.swp.evcs.entity.Member;
import fu.swp.evcs.entity.User;
import fu.swp.evcs.entity.Vehicle;
import fu.swp.evcs.exception.BadRequestException;
import fu.swp.evcs.exception.ForbiddenException;
import fu.swp.evcs.exception.ResourceNotFoundException;
import fu.swp.evcs.exception.UnauthorizedException;
import fu.swp.evcs.repository.GroupRepository;
import fu.swp.evcs.repository.MemberRepository;
import fu.swp.evcs.repository.VehicleRepository;
import lombok.RequiredArgsConstructor;

/**
 * ‚úÖ GroupService - X·ª≠ l√Ω t·∫•t c·∫£ logic v·ªÅ nh√≥m chia s·∫ª xe
 * 
 * Service x·ª≠ l√Ω:
 * - Validation (authentication, authorization, business rules)
 * - Business logic
 * - Throw exceptions (GlobalExceptionHandler s·∫Ω b·∫Øt)
 */
@Service
@RequiredArgsConstructor
public class GroupService {

    private final GroupRepository groupRepository;
    private final VehicleRepository vehicleRepository;
    private final MemberRepository memberRepository;

    /**
     * üü¢ Ch·ªß xe t·∫°o nh√≥m chia s·∫ª xe
     */
    public String createGroup(CreateGroupRequest request, User currentUser) {
        // 1. Validation authentication
        if (currentUser == null) {
            throw new UnauthorizedException("Vui l√≤ng ƒëƒÉng nh·∫≠p!");
        }
        
        // 2. Validation verification
        if (!"verified".equalsIgnoreCase(currentUser.getVerificationStatus())) {
            throw new ForbiddenException("T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c x√°c minh!");
        }
        
        // 3. T√¨m vehicle
        Vehicle vehicle = vehicleRepository.findById(request.getVehicleId())
                .orElseThrow(() -> new ResourceNotFoundException("Xe kh√¥ng t·ªìn t·∫°i!"));

        // 4. Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
        if (vehicle.getOwner() == null || !vehicle.getOwner().getId().equals(currentUser.getId())) {
            throw new ForbiddenException("B·∫°n kh√¥ng ph·∫£i ch·ªß s·ªü h·ªØu xe n√†y!");
        }

        // 5. Ki·ªÉm tra xe ƒë√£ n·∫±m trong nh√≥m kh√°c hay ch∆∞a
        boolean vehicleInOtherGroup = groupRepository.findAll().stream()
                .anyMatch(g -> g.getVehicle() != null
                        && g.getVehicle().getId().equals(vehicle.getId())
                        && !"rejected".equalsIgnoreCase(g.getApprovalStatus())
                        && !"closed".equalsIgnoreCase(g.getStatus()));

        if (vehicleInOtherGroup) {
            throw new BadRequestException("Xe n√†y ƒë√£ n·∫±m trong nh√≥m kh√°c ho·∫∑c nh√≥m ƒë√≥ ƒëang ho·∫°t ƒë·ªông/ch·ªù duy·ªát!");
        }

        // 6. Ki·ªÉm tra tr·∫°ng th√°i xe
        if (!"available".equalsIgnoreCase(vehicle.getStatus())) {
            throw new BadRequestException("Xe n√†y hi·ªán kh√¥ng s·∫µn s√†ng ƒë·ªÉ t·∫°o nh√≥m!");
        }

        // 7. T·∫°o nh√≥m chia s·∫ª
        Group group = Group.builder()
                .vehicle(vehicle)
                .createdBy(currentUser)
                .name(request.getGroupName())
                .description(request.getDescription())
                .estimatedValue(request.getEstimatedValue())
                .status("recruiting")
                .approvalStatus("pending")
                .maxMembers(request.getMaxMembers() != null ? request.getMaxMembers() : 5)
                .minOwnershipPercentage(request.getMinOwnershipPercentage() != null
                        ? BigDecimal.valueOf(request.getMinOwnershipPercentage())
                        : BigDecimal.valueOf(10.0))
                .createdAt(new Date())
                .build();

        groupRepository.save(group);

        // 8. C·∫≠p nh·∫≠t tr·∫°ng th√°i xe
        vehicle.setStatus("pending_approval");
        vehicleRepository.save(vehicle);

        // 9. Th√™m ng∆∞·ªùi t·∫°o nh√≥m v√†o danh s√°ch th√†nh vi√™n (ch·ªß nh√≥m)
        Member ownerMember = Member.builder()
                .group(group)
                .user(currentUser)
                .ownershipPercentage(100.0)
                .joinStatus("approved")
                .joinDate(new Date())
                .build();

        memberRepository.save(ownerMember);

        return "‚úÖ T·∫°o nh√≥m th√†nh c√¥ng! Nh√≥m ƒëang ch·ªù admin duy·ªát.";
    }

    /**
     * üîç Xem chi ti·∫øt nh√≥m
     */
    public Optional<Group> getGroupById(Long groupId) {
        return groupRepository.findById(groupId);
    }

    /**
     * üìã Danh s√°ch nh√≥m ƒëang tuy·ªÉn th√†nh vi√™n
     */
    public java.util.List<Group> getRecruitingGroups() {
        return groupRepository.findByStatus("recruiting");
    }
}
