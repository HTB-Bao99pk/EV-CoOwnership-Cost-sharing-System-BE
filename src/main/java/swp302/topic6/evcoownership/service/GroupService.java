package swp302.topic6.evcoownership.service;

import java.util.Date;
import java.util.Optional;

import org.springframework.stereotype.Service;

import lombok.RequiredArgsConstructor;
import swp302.topic6.evcoownership.dto.CreateGroupRequest;
import swp302.topic6.evcoownership.dto.EditGroupRequest;
import swp302.topic6.evcoownership.dto.GroupDetailResponse;
import swp302.topic6.evcoownership.dto.GroupMemberResponse;
import swp302.topic6.evcoownership.dto.UserGroupResponse;
import swp302.topic6.evcoownership.entity.CoOwnershipGroup;
import swp302.topic6.evcoownership.entity.GroupMember;
import swp302.topic6.evcoownership.entity.User;
import swp302.topic6.evcoownership.entity.Vehicle;
import swp302.topic6.evcoownership.repository.CoOwnershipGroupRepository;
import swp302.topic6.evcoownership.repository.UserRepository;
import swp302.topic6.evcoownership.repository.VehicleRepository;


@Service
@RequiredArgsConstructor
public class GroupService {

    private final CoOwnershipGroupRepository groupRepository;
    private final VehicleRepository vehicleRepository;
    private final UserRepository userRepository;
    private final swp302.topic6.evcoownership.repository.GroupMemberRepository groupMemberRepository;

    // Tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng th√†nh vi√™n active trong nh√≥m
    public int countActiveMembers(Long groupId) {
        return groupMemberRepository.countByGroup_GroupIdAndJoinStatus(groupId, "active");
    }

    // User requests to join a group with a requested ownership percentage
    public String requestToJoinGroup(Long groupId, Long userId, Double requestedPercentage) {
        // check group exists
        Optional<CoOwnershipGroup> groupOpt = groupRepository.findById(groupId);
        Optional<User> userOpt = userRepository.findById(userId);
        if (groupOpt.isEmpty() || userOpt.isEmpty()) {
            return "Nh√≥m ho·∫∑c ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i";
        }

        CoOwnershipGroup group = groupOpt.get();

        // validate minimum percentage based on group setting
        double minPct = group.getMinOwnershipPercentage() != null ? group.getMinOwnershipPercentage().doubleValue() : 10.0;
        if (requestedPercentage == null || requestedPercentage < minPct) {
            return "T·ª∑ l·ªá ƒë√≥ng g√≥p t·ªëi thi·ªÉu ƒë·ªÉ tham gia l√† " + minPct + "%";
        }
        User user = userOpt.get();

        // create pending GroupMember
        GroupMember req = GroupMember.builder()
                .group(group)
                .user(user)
                .ownershipPercentage(requestedPercentage)
                .joinStatus("pending")
                .joinDate(new Date())
                .build();

        groupMemberRepository.save(req);
        return "Y√™u c·∫ßu tham gia ƒë√£ ƒë∆∞·ª£c g·ª≠i (ch·ªù admin duy·ªát).";
    }

    /**
     * Tr·∫£ v·ªÅ chi ti·∫øt nh√≥m k√®m s·ªë l∆∞·ª£ng th√†nh vi√™n active (memberCount)
     */
    public GroupDetailResponse getGroupDetail(Long groupId) {
        Optional<CoOwnershipGroup> groupOpt = groupRepository.findById(groupId);
        if (groupOpt.isEmpty()) return null;
        CoOwnershipGroup g = groupOpt.get();
        GroupDetailResponse resp = new GroupDetailResponse();
        resp.setGroupId(g.getGroupId());
    resp.setVehicleId(g.getVehicle() != null ? g.getVehicle().getVehicle_id() : null);
        resp.setCreatedByUserId(g.getCreatedBy() != null ? g.getCreatedBy().getUserId() : null);
        resp.setGroupName(g.getGroupName());
        resp.setDescription(g.getDescription());
        resp.setStatus(g.getStatus());
        resp.setApprovalStatus(g.getApprovalStatus());
        resp.setCreatedAt(g.getCreatedAt());
        resp.setMaxMembers(g.getMaxMembers());
        resp.setMinOwnershipPercentage(g.getMinOwnershipPercentage());
        int memberCount = countActiveMembers(groupId);
        resp.setMemberCount(memberCount);
    // members list intentionally omitted ‚Äî frontend only requires memberCount
        return resp;
    }

    public String createGroup(CreateGroupRequest request, Long userId) {
        Optional<Vehicle> vehicleOpt = vehicleRepository.findById(request.getVehicleId());
        Optional<User> userOpt = userRepository.findById(userId);

        if (vehicleOpt.isEmpty() || userOpt.isEmpty()) {
            return "Xe ho·∫∑c ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!";
        }

        Vehicle vehicle = vehicleOpt.get();
        User creator = userOpt.get();

        // ‚ùå N·∫øu kh√¥ng ph·∫£i ch·ªß xe ‚Üí kh√¥ng ƒë∆∞·ª£c ph√©p t·∫°o nh√≥m
        if (vehicle.getOwner() == null || !vehicle.getOwner().getUserId().equals(userId)) {
            return "B·∫°n kh√¥ng ph·∫£i ch·ªß s·ªü h·ªØu xe n√†y!";
        }

        // ‚ùå N·∫øu xe ƒëang thu·ªôc nh√≥m kh√°c ‚Üí ch·∫∑n
        if (!"available".equalsIgnoreCase(vehicle.getStatus())) {
            return "Xe n√†y hi·ªán ƒëang thu·ªôc nh√≥m kh√°c ho·∫∑c ƒëang ch·ªù duy·ªát!";
        }

        // ‚úÖ T·∫°o nh√≥m chia s·∫ª xe
        CoOwnershipGroup group = CoOwnershipGroup.builder()
                .vehicle(vehicle)
                .createdBy(creator) // ƒê√É S·ª¨A: created_by -> createdBy
                .groupName(request.getGroupName()) // ƒê√É S·ª¨A: group_name -> groupName
                .description(request.getDescription())
                .estimatedValue(request.getEstimatedValue()) // ƒê√É S·ª¨A: estimated_value -> estimatedValue
                .status("recruiting")
                .approvalStatus("pending")  // ƒê√É S·ª¨A: approval_status -> approvalStatus
                .createdAt(new Date()) // Gi·∫£ ƒë·ªãnh tr∆∞·ªùng n√†y l√† 'createdAt'
                .build();

        groupRepository.save(group);

        // Th√™m ng∆∞·ªùi t·∫°o nh√≥m l√†m th√†nh vi√™n ƒë·∫ßu ti√™n (active)
        GroupMember creatorMember = GroupMember.builder()
                .group(group)
                .user(creator)
                .ownershipPercentage(100.0)
                .joinStatus("active")
                .joinDate(new Date())
                .build();
        // L∆∞u member (ng∆∞·ªùi t·∫°o nh√≥m)
        groupMemberRepository.save(creatorMember);

        // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i xe sang "pending_approval"
        vehicle.setStatus("pending_approval");
        vehicleRepository.save(vehicle);

        return "T·∫°o nh√≥m th√†nh c√¥ng! ƒêang ch·ªù admin duy·ªát.";
    }

    // ==========================
    // üÜï USER GROUP MANAGEMENT
    // ==========================

    /**
     * L·∫•y danh s√°ch nh√≥m c·ªßa user
     */
    public java.util.List<UserGroupResponse> getUserGroups(Long userId) {
        java.util.List<GroupMember> userMemberships = groupMemberRepository.findByUser_UserIdAndJoinStatus(userId, "active");
        
        return userMemberships.stream().map(member -> {
            CoOwnershipGroup group = member.getGroup();
            Vehicle vehicle = group.getVehicle();
            
            // T√≠nh to√°n monthly fee (gi·∫£ s·ª≠ = estimatedValue / 60 th√°ng)
            Double monthlyFee = group.getEstimatedValue() != null ? group.getEstimatedValue() / 60 : 0.0;
            
            // Ki·ªÉm tra role (creator = admin, others = member)
            String role = group.getCreatedBy().getUserId().equals(userId) ? "admin" : "member";
            
            // T√≠nh t·ªïng ownership percentage c·ªßa nh√≥m
            java.util.List<GroupMember> allMembers = groupMemberRepository.findByGroup_GroupIdAndJoinStatus(group.getGroupId(), "active");
            Double totalOwnership = allMembers.stream()
                    .mapToDouble(m -> m.getOwnershipPercentage() != null ? m.getOwnershipPercentage() : 0.0)
                    .sum();
            
            return UserGroupResponse.builder()
                    .id(group.getGroupId())
                    .groupName(group.getGroupName())
                    .description(group.getDescription())
                    .vehicleName(vehicle != null ? vehicle.getBrand() + " " + vehicle.getModel() : "Unknown Vehicle")
                    .vehicleModel(vehicle != null ? vehicle.getModel() : null)
                    .currentMembers(allMembers.size())
                    .maxMembers(group.getMaxMembers())
                    .myOwnershipPercentage(member.getOwnershipPercentage())
                    .totalOwnershipPercentage(totalOwnership)
                    .estimatedValue(group.getEstimatedValue())
                    .monthlyFee(monthlyFee)
                    .status(group.getStatus())
                    .role(role)
                    .createdAt(group.getCreatedAt())
                    .build();
        }).collect(java.util.stream.Collectors.toList());
    }

    /**
     * Ch·ªânh s·ª≠a th√¥ng tin nh√≥m (ch·ªâ admin nh√≥m)
     */
    public String editGroup(Long groupId, EditGroupRequest request, Long userId) {
        Optional<CoOwnershipGroup> groupOpt = groupRepository.findById(groupId);
        if (groupOpt.isEmpty()) {
            throw new RuntimeException("Nh√≥m kh√¥ng t·ªìn t·∫°i!");
        }
        
        CoOwnershipGroup group = groupOpt.get();
        
        // Ki·ªÉm tra quy·ªÅn admin
        if (!group.getCreatedBy().getUserId().equals(userId)) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a nh√≥m n√†y!");
        }
        
        // C·∫≠p nh·∫≠t th√¥ng tin
        if (request.getGroupName() != null && !request.getGroupName().trim().isEmpty()) {
            group.setGroupName(request.getGroupName());
        }
        if (request.getDescription() != null) {
            group.setDescription(request.getDescription());
        }
        if (request.getMaxMembers() != null && request.getMaxMembers() > 0) {
            // Ki·ªÉm tra kh√¥ng ƒë∆∞·ª£c nh·ªè h∆°n s·ªë th√†nh vi√™n hi·ªán t·∫°i
            int currentMembers = countActiveMembers(groupId);
            if (request.getMaxMembers() < currentMembers) {
                throw new RuntimeException("S·ªë th√†nh vi√™n t·ªëi ƒëa kh√¥ng ƒë∆∞·ª£c nh·ªè h∆°n s·ªë th√†nh vi√™n hi·ªán t·∫°i (" + currentMembers + ")!");
            }
            group.setMaxMembers(request.getMaxMembers());
        }
        if (request.getMinOwnershipPercentage() != null) {
            group.setMinOwnershipPercentage(request.getMinOwnershipPercentage());
        }
        
        groupRepository.save(group);
        return "C·∫≠p nh·∫≠t th√¥ng tin nh√≥m th√†nh c√¥ng!";
    }

    /**
     * X√≥a nh√≥m (ch·ªâ admin nh√≥m)
     */
    public String deleteGroup(Long groupId, Long userId) {
        Optional<CoOwnershipGroup> groupOpt = groupRepository.findById(groupId);
        if (groupOpt.isEmpty()) {
            throw new RuntimeException("Nh√≥m kh√¥ng t·ªìn t·∫°i!");
        }
        
        CoOwnershipGroup group = groupOpt.get();
        
        // Ki·ªÉm tra quy·ªÅn admin
        if (!group.getCreatedBy().getUserId().equals(userId)) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a nh√≥m n√†y!");
        }
        
        // X√≥a t·∫•t c·∫£ th√†nh vi√™n tr∆∞·ªõc
        java.util.List<GroupMember> members = groupMemberRepository.findByGroup_GroupId(groupId);
        groupMemberRepository.deleteAll(members);
        
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i xe v·ªÅ available
        Vehicle vehicle = group.getVehicle();
        if (vehicle != null) {
            vehicle.setStatus("available");
            vehicleRepository.save(vehicle);
        }
        
        // X√≥a nh√≥m
        groupRepository.delete(group);
        
        return "X√≥a nh√≥m th√†nh c√¥ng!";
    }

    /**
     * Ch·∫•p nh·∫≠n y√™u c·∫ßu tham gia (admin nh√≥m)
     */
    public String acceptJoinRequest(Long requestId, Long userId) {
        Optional<GroupMember> memberOpt = groupMemberRepository.findById(requestId);
        if (memberOpt.isEmpty()) {
            throw new RuntimeException("Y√™u c·∫ßu kh√¥ng t·ªìn t·∫°i!");
        }
        
        GroupMember member = memberOpt.get();
        CoOwnershipGroup group = member.getGroup();
        
        // Ki·ªÉm tra quy·ªÅn admin
        if (!group.getCreatedBy().getUserId().equals(userId)) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn duy·ªát y√™u c·∫ßu cho nh√≥m n√†y!");
        }
        
        if (!"pending".equals(member.getJoinStatus())) {
            throw new RuntimeException("Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥!");
        }
        
        // Ki·ªÉm tra gi·ªõi h·∫°n th√†nh vi√™n
        int currentMembers = countActiveMembers(group.getGroupId());
        if (currentMembers >= group.getMaxMembers()) {
            throw new RuntimeException("Nh√≥m ƒë√£ ƒë·∫°t gi·ªõi h·∫°n th√†nh vi√™n!");
        }
        
        // Ch·∫•p nh·∫≠n y√™u c·∫ßu
        member.setJoinStatus("active");
        groupMemberRepository.save(member);
        
        return "ƒê√£ ch·∫•p nh·∫≠n y√™u c·∫ßu tham gia c·ªßa " + member.getUser().getFullName();
    }

    /**
     * X√≥a th√†nh vi√™n kh·ªèi nh√≥m (admin nh√≥m)
     */
    public String removeMember(Long groupId, Long memberId, Long userId) {
        Optional<CoOwnershipGroup> groupOpt = groupRepository.findById(groupId);
        if (groupOpt.isEmpty()) {
            throw new RuntimeException("Nh√≥m kh√¥ng t·ªìn t·∫°i!");
        }
        
        CoOwnershipGroup group = groupOpt.get();
        
        // Ki·ªÉm tra quy·ªÅn admin
        if (!group.getCreatedBy().getUserId().equals(userId)) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a th√†nh vi√™n kh·ªèi nh√≥m n√†y!");
        }
        
        // T√¨m th√†nh vi√™n c·∫ßn x√≥a
        Optional<GroupMember> memberOpt = groupMemberRepository.findByGroup_GroupIdAndUser_UserId(groupId, memberId);
        if (memberOpt.isEmpty()) {
            throw new RuntimeException("Th√†nh vi√™n kh√¥ng t·ªìn t·∫°i trong nh√≥m!");
        }
        
        GroupMember member = memberOpt.get();
        
        // Kh√¥ng cho ph√©p x√≥a ch√≠nh m√¨nh (admin)
        if (member.getUser().getUserId().equals(userId)) {
            throw new RuntimeException("Kh√¥ng th·ªÉ x√≥a ch√≠nh m√¨nh kh·ªèi nh√≥m!");
        }
        
        // X√≥a th√†nh vi√™n
        groupMemberRepository.delete(member);
        
        return "ƒê√£ x√≥a " + member.getUser().getFullName() + " kh·ªèi nh√≥m!";
    }

    /**
     * L·∫•y danh s√°ch th√†nh vi√™n trong nh√≥m
     */
    public java.util.List<GroupMemberResponse> getGroupMembers(Long groupId, Long userId) {
        // Ki·ªÉm tra user c√≥ quy·ªÅn xem th√†nh vi√™n kh√¥ng (ph·∫£i l√† th√†nh vi√™n c·ªßa nh√≥m)
        Optional<GroupMember> userMemberOpt = groupMemberRepository.findByGroup_GroupIdAndUser_UserId(groupId, userId);
        if (userMemberOpt.isEmpty()) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn xem th√†nh vi√™n c·ªßa nh√≥m n√†y!");
        }
        
        java.util.List<GroupMember> members = groupMemberRepository.findByGroup_GroupIdAndJoinStatus(groupId, "active");
        
        return members.stream().map(member -> {
            User user = member.getUser();
            CoOwnershipGroup group = member.getGroup();
            
            // X√°c ƒë·ªãnh role
            String role = group.getCreatedBy().getUserId().equals(user.getUserId()) ? "admin" : "member";
            
            return GroupMemberResponse.builder()
                    .id(member.getMemberId())
                    .userId(user.getUserId())
                    .userName(user.getFullName())
                    .userEmail(user.getEmail())
                    .ownershipPercentage(member.getOwnershipPercentage())
                    .role(role)
                    .joinedAt(member.getJoinDate())
                    .status("active")
                    .build();
        }).collect(java.util.stream.Collectors.toList());
    }

    /**
     * L·∫•y th√¥ng tin chi ti·∫øt m·ªôt th√†nh vi√™n
     */
    public Optional<GroupMemberResponse> getGroupMemberById(Long groupId, Long memberId, Long userId) {
        // Ki·ªÉm tra user c√≥ quy·ªÅn xem kh√¥ng
        Optional<GroupMember> userMemberOpt = groupMemberRepository.findByGroup_GroupIdAndUser_UserId(groupId, userId);
        if (userMemberOpt.isEmpty()) {
            return Optional.empty();
        }
        
        Optional<GroupMember> memberOpt = groupMemberRepository.findByGroup_GroupIdAndUser_UserId(groupId, memberId);
        if (memberOpt.isEmpty()) {
            return Optional.empty();
        }
        
        GroupMember member = memberOpt.get();
        User user = member.getUser();
        CoOwnershipGroup group = member.getGroup();
        
        String role = group.getCreatedBy().getUserId().equals(user.getUserId()) ? "admin" : "member";
        
        GroupMemberResponse response = 
            GroupMemberResponse.builder()
                .id(member.getMemberId())
                .userId(user.getUserId())
                .userName(user.getFullName())
                .userEmail(user.getEmail())
                .ownershipPercentage(member.getOwnershipPercentage())
                .role(role)
                .joinedAt(member.getJoinDate())
                .status(member.getJoinStatus())
                .build();
                
        return Optional.of(response);
    }
}