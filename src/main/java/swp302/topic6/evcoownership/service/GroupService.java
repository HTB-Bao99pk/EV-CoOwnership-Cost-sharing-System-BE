package swp302.topic6.evcoownership.service;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import swp302.topic6.evcoownership.dto.CreateGroupRequest;
import swp302.topic6.evcoownership.entity.CoOwnershipGroup;
import swp302.topic6.evcoownership.entity.GroupMember;
import swp302.topic6.evcoownership.entity.User;
import swp302.topic6.evcoownership.entity.Vehicle;
import swp302.topic6.evcoownership.repository.CoOwnershipGroupRepository;
import swp302.topic6.evcoownership.repository.GroupMemberRepository;
import swp302.topic6.evcoownership.repository.UserRepository;
import swp302.topic6.evcoownership.repository.VehicleRepository;

import java.math.BigDecimal;
import java.util.Date;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class GroupService {

    private final CoOwnershipGroupRepository groupRepository;
    private final VehicleRepository vehicleRepository;
    private final UserRepository userRepository;
    private final GroupMemberRepository groupMemberRepository;

    /**
     * üü¢ Ch·ªß xe t·∫°o nh√≥m chia s·∫ª xe
     */
    public String createGroup(CreateGroupRequest request, Long userId) {
        Optional<Vehicle> vehicleOpt = vehicleRepository.findById(request.getVehicleId());
        Optional<User> userOpt = userRepository.findById(userId);

        if (vehicleOpt.isEmpty() || userOpt.isEmpty()) {
            return "‚ùå Xe ho·∫∑c ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!";
        }

        Vehicle vehicle = vehicleOpt.get();
        User creator = userOpt.get();

        // ‚úÖ Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
        if (vehicle.getOwner() == null || !vehicle.getOwner().getUserId().equals(userId)) {
            return "‚ùå B·∫°n kh√¥ng ph·∫£i ch·ªß s·ªü h·ªØu xe n√†y!";
        }

        // ‚úÖ Xe ƒëang thu·ªôc nh√≥m kh√°c => ch·∫∑n
        if (!"available".equalsIgnoreCase(vehicle.getStatus())) {
            return "‚ö†Ô∏è Xe n√†y hi·ªán kh√¥ng th·ªÉ t·∫°o nh√≥m (ƒëang ch·ªù duy·ªát ho·∫∑c thu·ªôc nh√≥m kh√°c)!";
        }

        // ‚úÖ T·∫°o nh√≥m chia s·∫ª
        CoOwnershipGroup group = CoOwnershipGroup.builder()
                .vehicle(vehicle)
                .createdBy(creator)
                .groupName(request.getGroupName())
                .description(request.getDescription())
                .estimatedValue(request.getEstimatedValue())
                .status("recruiting")
                .approvalStatus("pending")
                .maxMembers(request.getMaxMembers() != null ? request.getMaxMembers() : 5)
                .minOwnershipPercentage(request.getMinOwnershipPercentage() != null
                        ? BigDecimal.valueOf(request.getMinOwnershipPercentage())
                        : BigDecimal.valueOf(10.0))
                .createdAt(new Date())
                .build();

        groupRepository.save(group);

        // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i xe
        vehicle.setStatus("pending_approval");
        vehicleRepository.save(vehicle);

        // ‚úÖ Th√™m ng∆∞·ªùi t·∫°o nh√≥m v√†o danh s√°ch th√†nh vi√™n (ch·ªß nh√≥m)
        GroupMember ownerMember = GroupMember.builder()
                .group(group)
                .user(creator)
                .ownershipPercentage(100.0) // T·∫°m th·ªùi 100%, sau n√†y c√≥ th·ªÉ chia l·∫°i
                .joinStatus("approved")
                .joinDate(new Date())

                .build();

        groupMemberRepository.save(ownerMember);

        return "‚úÖ T·∫°o nh√≥m th√†nh c√¥ng! Nh√≥m ƒëang ch·ªù admin duy·ªát.";
    }

    /**
     * üü° Xem chi ti·∫øt nh√≥m
     */
    public Optional<CoOwnershipGroup> getGroupById(Long groupId) {
        return groupRepository.findById(groupId);
    }

    /**
     * üü£ Xem danh s√°ch nh√≥m ƒëang tuy·ªÉn th√†nh vi√™n
     */
    public java.util.List<CoOwnershipGroup> getRecruitingGroups() {
        return groupRepository.findByStatus("recruiting");
    }
}
