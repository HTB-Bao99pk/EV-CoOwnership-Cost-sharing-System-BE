package swp302.topic6.evcoownership.service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;

import lombok.RequiredArgsConstructor;
import swp302.topic6.evcoownership.entity.CoOwnershipGroup;
import swp302.topic6.evcoownership.entity.GroupMember;
import swp302.topic6.evcoownership.entity.User;
import swp302.topic6.evcoownership.repository.CoOwnershipGroupRepository;
import swp302.topic6.evcoownership.repository.GroupMemberRepository;
import swp302.topic6.evcoownership.repository.UserRepository;

@Service
@RequiredArgsConstructor
public class AdminService {

    private final CoOwnershipGroupRepository coOwnershipGroupRepository;
    private final UserRepository userRepository;
    private final GroupMemberRepository groupMemberRepository;

    // ==========================
    // 1Ô∏è‚É£ DUY·ªÜT NH√ìM CHIA S·∫∫ XE
    // ==========================
    public List<CoOwnershipGroup> getPendingGroups() {
        return coOwnershipGroupRepository.findByApprovalStatus("pending");
    }

    public String approveGroup(Long groupId, Long adminId) {
        Optional<CoOwnershipGroup> groupOpt = coOwnershipGroupRepository.findById(groupId);
        Optional<User> adminOpt = userRepository.findById(adminId);

        if (groupOpt.isEmpty()) { return "Nh√≥m kh√¥ng t·ªìn t·∫°i!"; }
        if (adminOpt.isEmpty()) { return "Admin kh√¥ng t·ªìn t·∫°i!"; }

        CoOwnershipGroup group = groupOpt.get();
        User admin = adminOpt.get();

        group.setApprovalStatus("approved"); // ƒê√É S·ª¨A: T√™n setter
        group.setApprovedBy(admin);       // ƒê√É S·ª¨A: Truy·ªÅn ƒë·ªëi t∆∞·ª£ng User
        coOwnershipGroupRepository.save(group);

        return "‚úÖ Nh√≥m ƒë√£ ƒë∆∞·ª£c duy·ªát th√†nh c√¥ng!";
    }

    public String rejectGroup(Long groupId, String reason, Long adminId) {
        Optional<CoOwnershipGroup> groupOpt = coOwnershipGroupRepository.findById(groupId);
        Optional<User> adminOpt = userRepository.findById(adminId);

        if (groupOpt.isEmpty()) { return "Nh√≥m kh√¥ng t·ªìn t·∫°i!"; }
        if (adminOpt.isEmpty()) { return "Admin kh√¥ng t·ªìn t·∫°i!"; }

        CoOwnershipGroup group = groupOpt.get();
        User admin = adminOpt.get();

        group.setApprovalStatus("rejected"); // ƒê√É S·ª¨A: T√™n setter
        group.setRejectReason(reason);      // ƒê√É S·ª¨A: T√™n setter
        group.setApprovedBy(admin);       // ƒê√É S·ª¨A: Truy·ªÅn ƒë·ªëi t∆∞·ª£ng User
        coOwnershipGroupRepository.save(group);

        return "‚ùå Nh√≥m ƒë√£ b·ªã t·ª´ ch·ªëi v·ªõi l√Ω do: " + reason;
    }

    // ==========================
    // 1.5Ô∏è‚É£ DUY·ªÜT TH√ÄNH VI√äN
    // ==========================

    // S·ª¨A: findByStatus -> findByJoinStatus
    public List<GroupMember> getPendingMembers() {
        return groupMemberRepository.findByJoinStatus("pending");
    }

    public String approveMember(Long memberId) {
        Optional<GroupMember> memberOpt = groupMemberRepository.findById(memberId);
        if (memberOpt.isEmpty()) {
            return "Y√™u c·∫ßu tham gia kh√¥ng t·ªìn t·∫°i!";
        }
        GroupMember member = memberOpt.get();
        // Ki·ªÉm tra theo c·∫•u h√¨nh c·ªßa nh√≥m
        Long groupId = member.getGroup().getGroupId();
        Optional<CoOwnershipGroup> groupOpt = coOwnershipGroupRepository.findById(groupId);
        if (groupOpt.isEmpty()) {
            return "Nh√≥m kh√¥ng t·ªìn t·∫°i!";
        }
        CoOwnershipGroup group = groupOpt.get();

        int activeCount = groupMemberRepository.countByGroup_GroupIdAndJoinStatus(groupId, "active");
    Integer maxMembersObj = group.getMaxMembers();
    int maxMembers = 5;
    if (maxMembersObj != null) maxMembers = maxMembersObj;
        if (activeCount >= maxMembers) {
            return "Nh√≥m ƒë√£ ƒë·∫°t gi·ªõi h·∫°n " + maxMembers + " th√†nh vi√™n. Kh√¥ng th·ªÉ duy·ªát th√™m.";
        }

        // Ki·ªÉm tra t·ª∑ l·ªá ƒë√≥ng g√≥p t·ªëi thi·ªÉu theo nh√≥m
        Double requestedPct = member.getOwnershipPercentage();
    double minPct = group.getMinOwnershipPercentage() != null ? group.getMinOwnershipPercentage().doubleValue() : 10.0;
        if (requestedPct == null || requestedPct < minPct) {
            return "T·ª∑ l·ªá ƒë√≥ng g√≥p t·ªëi thi·ªÉu ƒë·ªÉ tham gia l√† " + minPct + "%";
        }

        // Ki·ªÉm tra t·ªïng t·ª∑ l·ªá ownership hi·ªán t·∫°i + requested kh√¥ng v∆∞·ª£t qu√° 100%
        java.util.List<GroupMember> activeMembers = groupMemberRepository.findByGroup_GroupIdAndJoinStatus(groupId, "active");
        double total = 0.0;
        for (GroupMember gm : activeMembers) {
            if (gm.getOwnershipPercentage() != null) total += gm.getOwnershipPercentage();
        }
        if (total + requestedPct > 100.0) {
            return "Kh√¥ng th·ªÉ duy·ªát: t·ªïng t·ª∑ l·ªá ownership s·∫Ω v∆∞·ª£t qu√° 100%. Hi·ªán t·∫°i: " + total + "%";
        }

        member.setJoinStatus("active"); // ƒê√É S·ª¨A L·ªñI CU·ªêI: setStatus -> setJoinStatus
        groupMemberRepository.save(member);
        // Sau khi duy·ªát, t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ownership c·ªßa t·∫•t c·∫£ th√†nh vi√™n active (chia ƒë·ªÅu)
        java.util.List<GroupMember> updatedActiveMembers = groupMemberRepository.findByGroup_GroupIdAndJoinStatus(groupId, "active");
        int n = updatedActiveMembers.size();
        if (n > 0) {
            BigDecimal totalBd = new BigDecimal("100.00");
            BigDecimal share = totalBd.divide(new BigDecimal(n), 2, RoundingMode.DOWN);
            BigDecimal sum = share.multiply(new BigDecimal(n));
            BigDecimal diff = totalBd.subtract(sum); // remainder (<= 0.99)

            for (int i = 0; i < updatedActiveMembers.size(); i++) {
                GroupMember gm = updatedActiveMembers.get(i);
                BigDecimal newPct = share;
                if (i == 0) {
                    // add remainder to the first member to ensure total sums to 100
                    newPct = newPct.add(diff);
                }
                gm.setOwnershipPercentage(newPct.doubleValue());
                groupMemberRepository.save(gm);
            }
        }
        return "‚úÖ Y√™u c·∫ßu tham gia ƒë√£ ƒë∆∞·ª£c duy·ªát!";
    }

    /**
     * Admin c·∫≠p nh·∫≠t c·∫•u h√¨nh nh√≥m: maxMembers v√† minOwnershipPercentage
     */
    public String updateGroupSettings(Long groupId, Integer maxMembers, BigDecimal minOwnershipPercentage) {
        Optional<CoOwnershipGroup> groupOpt = coOwnershipGroupRepository.findById(groupId);
        if (groupOpt.isEmpty()) {
            return "Nh√≥m kh√¥ng t·ªìn t·∫°i!";
        }
        CoOwnershipGroup group = groupOpt.get();
        if (maxMembers != null) {
            group.setMaxMembers(maxMembers);
        }
        if (minOwnershipPercentage != null) {
            group.setMinOwnershipPercentage(minOwnershipPercentage);
        }
        coOwnershipGroupRepository.save(group);
        return "C·∫≠p nh·∫≠t c·∫•u h√¨nh nh√≥m th√†nh c√¥ng";
    }

    public String rejectMember(Long memberId, String reason) {
        Optional<GroupMember> memberOpt = groupMemberRepository.findById(memberId);
        if (memberOpt.isEmpty()) {
            return "Y√™u c·∫ßu tham gia kh√¥ng t·ªìn t·∫°i!";
        }
        GroupMember member = memberOpt.get();
        member.setJoinStatus("rejected"); // ƒê√É S·ª¨A L·ªñI CU·ªêI: setStatus -> setJoinStatus
        groupMemberRepository.save(member);
        return "‚ùå Y√™u c·∫ßu tham gia ƒë√£ b·ªã t·ª´ ch·ªëi!";
    }


    // =========================================
    // 2Ô∏è‚É£ DUY·ªÜT NG∆Ø·ªúI D√ôNG / X√ÅC MINH T√ÄI KHO·∫¢N
    // =========================================
    public List<User> getPendingUsers() {
        return userRepository.findByVerificationStatus("pending");
    }

    // List all users
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    // Get user by id
    public Optional<User> getUserById(Long userId) {
        return userRepository.findById(userId);
    }

    // Approve (activate) user
    public String approveUser(Long userId) {
        Optional<User> userOpt = userRepository.findById(userId);
        if (userOpt.isEmpty()) return "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!";
        User user = userOpt.get();
        user.setVerificationStatus("verified");
        userRepository.save(user);
        return "‚úÖ Ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c b·∫≠t (verified).";
    }

    // Reject user
    public String rejectUser(Long userId) {
        Optional<User> userOpt = userRepository.findById(userId);
        if (userOpt.isEmpty()) return "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!";
        User user = userOpt.get();
        user.setVerificationStatus("rejected");
        userRepository.save(user);
        return "‚ùå Ng∆∞·ªùi d√πng ƒë√£ b·ªã t·ª´ ch·ªëi.";
    }

    // Delete user
    public String deleteUser(Long userId) {
        Optional<User> userOpt = userRepository.findById(userId);
        if (userOpt.isEmpty()) return "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!";
        userRepository.deleteById(userId);
        return "üóëÔ∏è Ng∆∞·ªùi d√πng ƒë√£ b·ªã x√≥a.";
    }

    public String verifyUser(Long userId) {
        Optional<User> userOpt = userRepository.findById(userId);

        if (userOpt.isEmpty()) { return "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!"; }

        User user = userOpt.get();
        user.setVerificationStatus("verified");
        userRepository.save(user);

        return "‚úÖ T√†i kho·∫£n " + user.getFullName() + " ƒë√£ ƒë∆∞·ª£c x√°c minh!";
    }

    public String rejectUserVerification(Long userId, String reason) {
        Optional<User> userOpt = userRepository.findById(userId);

        if (userOpt.isEmpty()) { return "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!"; }

        User user = userOpt.get();
        user.setVerificationStatus("rejected");
        userRepository.save(user);

        return "‚ùå T√†i kho·∫£n " + user.getFullName() + " b·ªã t·ª´ ch·ªëi x√°c minh. L√Ω do: " + reason;
    }

    // ==========================
    // QU·∫¢N L√ù Y√äU C·∫¶U THAM GIA NH√ìM
    // ==========================

    /**
     * L·∫•y t·∫•t c·∫£ y√™u c·∫ßu tham gia nh√≥m
     */
    public List<swp302.topic6.evcoownership.dto.AdminRequestResponse> getAllJoinRequests() {
        List<GroupMember> pendingMembers = groupMemberRepository.findByJoinStatus("pending");
        
        return pendingMembers.stream().map(member -> {
            CoOwnershipGroup group = member.getGroup();
            User user = member.getUser();
            
            return swp302.topic6.evcoownership.dto.AdminRequestResponse.builder()
                    .id(member.getMemberId())
                    .groupId(group.getGroupId())
                    .groupName(group.getGroupName())
                    .userId(user.getUserId())
                    .userName(user.getFullName())
                    .userEmail(user.getEmail())
                    .message("Y√™u c·∫ßu tham gia nh√≥m") // C√≥ th·ªÉ th√™m field message v√†o GroupMember entity
                    .status(member.getJoinStatus())
                    .createdAt(member.getJoinDate())
                    .updatedAt(member.getJoinDate())
                    .requestedPercentage(member.getOwnershipPercentage())
                    .build();
        }).toList();
    }

    /**
     * L·∫•y chi ti·∫øt y√™u c·∫ßu tham gia theo ID
     */
    public Optional<swp302.topic6.evcoownership.dto.AdminRequestResponse> getJoinRequestById(Long requestId) {
        Optional<GroupMember> memberOpt = groupMemberRepository.findById(requestId);
        
        if (memberOpt.isEmpty()) {
            return Optional.empty();
        }
        
        GroupMember member = memberOpt.get();
        CoOwnershipGroup group = member.getGroup();
        User user = member.getUser();
        
        swp302.topic6.evcoownership.dto.AdminRequestResponse response = 
            swp302.topic6.evcoownership.dto.AdminRequestResponse.builder()
                .id(member.getMemberId())
                .groupId(group.getGroupId())
                .groupName(group.getGroupName())
                .userId(user.getUserId())
                .userName(user.getFullName())
                .userEmail(user.getEmail())
                .message("Y√™u c·∫ßu tham gia nh√≥m")
                .status(member.getJoinStatus())
                .createdAt(member.getJoinDate())
                .updatedAt(member.getJoinDate())
                .requestedPercentage(member.getOwnershipPercentage())
                .build();
                
        return Optional.of(response);
    }

    /**
     * Ch·∫•p nh·∫≠n y√™u c·∫ßu tham gia nh√≥m
     */
    public String acceptJoinRequest(Long requestId) {
        Optional<GroupMember> memberOpt = groupMemberRepository.findById(requestId);
        
        if (memberOpt.isEmpty()) {
            throw new RuntimeException("Y√™u c·∫ßu kh√¥ng t·ªìn t·∫°i!");
        }
        
        GroupMember member = memberOpt.get();
        
        if (!"pending".equals(member.getJoinStatus())) {
            throw new RuntimeException("Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥!");
        }
        
        // Ki·ªÉm tra xem nh√≥m c√≥ c√≤n ch·ªó kh√¥ng
        CoOwnershipGroup group = member.getGroup();
        int currentMemberCount = groupMemberRepository.countByGroupAndJoinStatus(group, "approved");
        
        if (currentMemberCount >= group.getMaxMembers()) {
            throw new RuntimeException("Nh√≥m ƒë√£ ƒë·∫ßy th√†nh vi√™n!");
        }
        
        // Ch·∫•p nh·∫≠n y√™u c·∫ßu
        member.setJoinStatus("approved");
        groupMemberRepository.save(member);
        
        return "‚úÖ ƒê√£ ch·∫•p nh·∫≠n y√™u c·∫ßu tham gia nh√≥m c·ªßa " + member.getUser().getFullName();
    }

    /**
     * T·ª´ ch·ªëi y√™u c·∫ßu tham gia nh√≥m
     */
    public String cancelJoinRequest(Long requestId, String reason) {
        Optional<GroupMember> memberOpt = groupMemberRepository.findById(requestId);
        
        if (memberOpt.isEmpty()) {
            throw new RuntimeException("Y√™u c·∫ßu kh√¥ng t·ªìn t·∫°i!");
        }
        
        GroupMember member = memberOpt.get();
        
        if (!"pending".equals(member.getJoinStatus())) {
            throw new RuntimeException("Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥!");
        }
        
        // T·ª´ ch·ªëi y√™u c·∫ßu
        member.setJoinStatus("rejected");
        groupMemberRepository.save(member);
        
        String message = "‚ùå ƒê√£ t·ª´ ch·ªëi y√™u c·∫ßu tham gia nh√≥m c·ªßa " + member.getUser().getFullName();
        if (reason != null && !reason.trim().isEmpty()) {
            message += ". L√Ω do: " + reason;
        }
        
        return message;
    }
}