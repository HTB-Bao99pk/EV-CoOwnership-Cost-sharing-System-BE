package swp302.topic6.evcoownership.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

import lombok.RequiredArgsConstructor;
import swp302.topic6.evcoownership.dto.CreateGroupRequest;
import swp302.topic6.evcoownership.dto.GroupDetailResponse;
import swp302.topic6.evcoownership.service.GroupService;

@RestController
@RequestMapping("/api/groups")
@RequiredArgsConstructor
@CrossOrigin(origins = "http://localhost:3000")
public class GroupController {

    private final GroupService groupService;

    /**
     * API t·∫°o nh√≥m chia s·∫ª xe
     * Ch·ªâ ch·ªß s·ªü h·ªØu xe m·ªõi ƒë∆∞·ª£c ph√©p t·∫°o nh√≥m
     */
    @PostMapping("/create")
    public ResponseEntity<String> createGroup(
            @RequestBody CreateGroupRequest request,
            @RequestParam Long userId // gi·∫£ l·∫≠p ID ng∆∞·ªùi t·∫°o nh√≥m (s·∫Ω d√πng Auth th·ª±c sau)
    ) {
        try {
            String result = groupService.createGroup(request, userId);
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            return ResponseEntity.internalServerError()
                    .body("L·ªói khi t·∫°o nh√≥m: " + e.getMessage());
        }
    }

    /**
     * API tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng th√†nh vi√™n active trong nh√≥m
     */
    @GetMapping("/{groupId}/members/count")
    public ResponseEntity<Integer> getActiveMemberCount(@PathVariable Long groupId) {
        try {
            int count = groupService.countActiveMembers(groupId);
            return ResponseEntity.ok(count);
        } catch (Exception e) {
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * Y√™u c·∫ßu tham gia nh√≥m (g·ª≠i requestedPercentage)
     */
    @PostMapping("/{groupId}/join")
    public ResponseEntity<String> requestJoin(@PathVariable Long groupId,
                                              @RequestBody swp302.topic6.evcoownership.dto.JoinGroupRequest body) {
        try {
            String result = groupService.requestToJoinGroup(groupId, body.getUserId(), body.getRequestedPercentage());
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            return ResponseEntity.internalServerError().body("L·ªói khi g·ª≠i y√™u c·∫ßu: " + e.getMessage());
        }
    }

    /**
     * Tr·∫£ v·ªÅ chi ti·∫øt nh√≥m k√®m s·ªë l∆∞·ª£ng th√†nh vi√™n active
     */
    @GetMapping("/{groupId}")
    public ResponseEntity<GroupDetailResponse> getGroupDetail(@PathVariable Long groupId) {
        GroupDetailResponse resp = groupService.getGroupDetail(groupId);
        if (resp == null) return ResponseEntity.notFound().build();
        return ResponseEntity.ok(resp);
    }

    // ====== üÜï User Group Management APIs ======

    /**
     * L·∫•y danh s√°ch nh√≥m c·ªßa user hi·ªán t·∫°i
     */
    @GetMapping("/user/{userId}")
    public ResponseEntity<List<swp302.topic6.evcoownership.dto.UserGroupResponse>> getMyGroups(@PathVariable Long userId) {
        return ResponseEntity.ok(groupService.getUserGroups(userId));
    }

    /**
     * Ch·ªânh s·ª≠a th√¥ng tin nh√≥m (ch·ªâ admin nh√≥m)
     */
    @PutMapping("/{groupId}")
    public ResponseEntity<swp302.topic6.evcoownership.dto.ApiResponse> editGroup(
            @PathVariable Long groupId,
            @RequestBody swp302.topic6.evcoownership.dto.EditGroupRequest request,
            @RequestParam Long userId) {
        try {
            String message = groupService.editGroup(groupId, request, userId);
            return ResponseEntity.ok(new swp302.topic6.evcoownership.dto.ApiResponse(true, message));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                    .body(new swp302.topic6.evcoownership.dto.ApiResponse(false, e.getMessage()));
        }
    }

    /**
     * X√≥a nh√≥m (ch·ªâ admin nh√≥m)
     */
    @DeleteMapping("/{groupId}")
    public ResponseEntity<swp302.topic6.evcoownership.dto.ApiResponse> deleteGroup(
            @PathVariable Long groupId,
            @RequestParam Long userId) {
        try {
            String message = groupService.deleteGroup(groupId, userId);
            return ResponseEntity.ok(new swp302.topic6.evcoownership.dto.ApiResponse(true, message));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                    .body(new swp302.topic6.evcoownership.dto.ApiResponse(false, e.getMessage()));
        }
    }

    /**
     * Ch·∫•p nh·∫≠n y√™u c·∫ßu tham gia (admin nh√≥m)
     */
    @PostMapping("/requests/{requestId}/accept")
    public ResponseEntity<swp302.topic6.evcoownership.dto.ApiResponse> acceptJoinRequest(
            @PathVariable Long requestId,
            @RequestParam Long userId) {
        try {
            String message = groupService.acceptJoinRequest(requestId, userId);
            return ResponseEntity.ok(new swp302.topic6.evcoownership.dto.ApiResponse(true, message));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                    .body(new swp302.topic6.evcoownership.dto.ApiResponse(false, e.getMessage()));
        }
    }

    /**
     * X√≥a th√†nh vi√™n kh·ªèi nh√≥m (admin nh√≥m)
     */
    @DeleteMapping("/{groupId}/members/{memberId}")
    public ResponseEntity<swp302.topic6.evcoownership.dto.ApiResponse> removeMember(
            @PathVariable Long groupId,
            @PathVariable Long memberId,
            @RequestParam Long userId) {
        try {
            String message = groupService.removeMember(groupId, memberId, userId);
            return ResponseEntity.ok(new swp302.topic6.evcoownership.dto.ApiResponse(true, message));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                    .body(new swp302.topic6.evcoownership.dto.ApiResponse(false, e.getMessage()));
        }
    }

    /**
     * L·∫•y danh s√°ch th√†nh vi√™n trong nh√≥m
     */
    @GetMapping("/{groupId}/members")
    public ResponseEntity<List<swp302.topic6.evcoownership.dto.GroupMemberResponse>> getGroupMembers(
            @PathVariable Long groupId,
            @RequestParam Long userId) {
        try {
            return ResponseEntity.ok(groupService.getGroupMembers(groupId, userId));
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * L·∫•y th√¥ng tin chi ti·∫øt m·ªôt th√†nh vi√™n
     */
    @GetMapping("/{groupId}/members/{memberId}")
    public ResponseEntity<swp302.topic6.evcoownership.dto.GroupMemberResponse> getGroupMemberById(
            @PathVariable Long groupId,
            @PathVariable Long memberId,
            @RequestParam Long userId) {
        return groupService.getGroupMemberById(groupId, memberId, userId)
                .map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }
}
