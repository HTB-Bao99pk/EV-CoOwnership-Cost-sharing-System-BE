package swp302.topic6.evcoownership.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*; // ‚≠êÔ∏è T·ªêI ∆ØU: Xo√° CrossOrigin

import java.util.List;

import jakarta.servlet.http.HttpSession; // ‚≠êÔ∏è T·ªêI ∆ØU: D√πng Session
import lombok.RequiredArgsConstructor;
import swp302.topic6.evcoownership.dto.ApiResponse;
import swp302.topic6.evcoownership.dto.CreateGroupRequest;
import swp302.topic6.evcoownership.dto.EditGroupRequest;
import swp302.topic6.evcoownership.dto.GroupDetailResponse;
import swp302.topic6.evcoownership.dto.GroupMemberResponse;
import swp302.topic6.evcoownership.dto.JoinGroupRequest;
import swp302.topic6.evcoownership.dto.UserGroupResponse;
import swp302.topic6.evcoownership.service.GroupService;
import swp302.topic6.evcoownership.utils.SessionUtils; // ‚≠êÔ∏è T·ªêI ∆ØU: D√πng SessionUtils

@RestController
@RequestMapping("/api/groups")
@RequiredArgsConstructor
// ‚≠êÔ∏è T·ªêI ∆ØU: Xo√° @CrossOrigin(origins = "http://localhost:3000")
// ƒê√£ c·∫•u h√¨nh t·∫≠p trung t·∫°i CorsConfig.java
public class GroupController {

    private final GroupService groupService;
    private final SessionUtils sessionUtils; // ‚≠êÔ∏è T·ªêI ∆ØU: Ti√™m SessionUtils

    /**
     * ‚≠êÔ∏è T·ªêI ∆ØU: H√†m helper ki·ªÉm tra ƒëƒÉng nh·∫≠p v√† l·∫•y userId
     * N√©m l·ªói n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, GlobalExceptionHandler s·∫Ω b·∫Øt
     */
    private Long getAuthenticatedUserId(HttpSession session) {
        Long userId = sessionUtils.getUserId(session);
        if (userId == null) {
            throw new RuntimeException("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán ch·ª©c nƒÉng n√†y!");
        }
        return userId;
    }

    /**
     * API t·∫°o nh√≥m chia s·∫ª xe
     * Ch·ªâ ch·ªß s·ªü h·ªØu xe m·ªõi ƒë∆∞·ª£c ph√©p t·∫°o nh√≥m
     */
    @PostMapping("/create")
    public ResponseEntity<ApiResponse> createGroup(
            @RequestBody CreateGroupRequest request,
            HttpSession session // ‚≠êÔ∏è T·ªêI ∆ØU: D√πng session
            // ‚≠êÔ∏è T·ªêI ∆ØU: X√≥a @RequestParam Long userId
    ) {
        // ‚≠êÔ∏è T·ªêI ∆ØU: L·∫•y userId t·ª´ session an to√†n
        Long userId = getAuthenticatedUserId(session);

        // ‚≠êÔ∏è T·ªêI ∆ØU: Xo√° try-catch, GlobalExceptionHandler s·∫Ω b·∫Øt l·ªói
        String result = groupService.createGroup(request, userId);
        return ResponseEntity.ok(new ApiResponse(true, result));
    }

    /**
     * API tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng th√†nh vi√™n active trong nh√≥m
     */
    @GetMapping("/{groupId}/members/count")
    public ResponseEntity<Integer> getActiveMemberCount(@PathVariable Long groupId) {
        // ‚≠êÔ∏è T·ªêI ∆ØU: Xo√° try-catch
        int count = groupService.countActiveMembers(groupId);
        return ResponseEntity.ok(count);
    }

    /**
     * Y√™u c·∫ßu tham gia nh√≥m (g·ª≠i requestedPercentage)
     */
    @PostMapping("/{groupId}/join")
    public ResponseEntity<ApiResponse> requestJoin(@PathVariable Long groupId,
                                                   @RequestBody JoinGroupRequest body,
                                                   HttpSession session) {
        // ‚≠êÔ∏è T·ªêI ∆ØU: L·∫•y userId t·ª´ session, KH√îNG tin t∆∞·ªüng userId t·ª´ body
        Long userId = getAuthenticatedUserId(session);

        // ‚≠êÔ∏è T·ªêI ∆ØU: Xo√° try-catch
        String result = groupService.requestToJoinGroup(groupId, userId, body.getRequestedPercentage());
        return ResponseEntity.ok(new ApiResponse(true, result));
    }

    /**
     * Tr·∫£ v·ªÅ chi ti·∫øt nh√≥m k√®m s·ªë l∆∞·ª£ng th√†nh vi√™n active
     */
    @GetMapping("/{groupId}")
    public ResponseEntity<GroupDetailResponse> getGroupDetail(@PathVariable Long groupId) {
        // ‚≠êÔ∏è T·ªêI ∆ØU: Xo√° try-catch. Service s·∫Ω n√©m l·ªói n·∫øu kh√¥ng t√¨m th·∫•y
        GroupDetailResponse resp = groupService.getGroupDetail(groupId);
        return ResponseEntity.ok(resp);
    }

    // ====== üÜï User Group Management APIs ======

    /**
     * L·∫•y danh s√°ch nh√≥m C·ª¶A T√îI (c·ªßa user ƒëang ƒëƒÉng nh·∫≠p)
     */
    // ‚≠êÔ∏è T·ªêI ∆ØU: ƒê·ªïi path /user/{userId} -> /my-groups cho chu·∫©n REST
    @GetMapping("/my-groups")
    public ResponseEntity<List<UserGroupResponse>> getMyGroups(HttpSession session) {
        Long userId = getAuthenticatedUserId(session);
        return ResponseEntity.ok(groupService.getUserGroups(userId));
    }

    /**
     * Ch·ªânh s·ª≠a th√¥ng tin nh√≥m (ch·ªâ admin nh√≥m)
     */
    @PutMapping("/{groupId}")
    public ResponseEntity<ApiResponse> editGroup(
            @PathVariable Long groupId,
            @RequestBody EditGroupRequest request,
            HttpSession session) { // ‚≠êÔ∏è T·ªêI ∆ØU: D√πng session
        Long userId = getAuthenticatedUserId(session);
        // ‚≠êÔ∏è T·ªêI ∆ØU: Xo√° try-catch
        String message = groupService.editGroup(groupId, request, userId);
        return ResponseEntity.ok(new ApiResponse(true, message));
    }

    /**
     * X√≥a nh√≥m (ch·ªâ admin nh√≥m)
     */
    @DeleteMapping("/{groupId}")
    public ResponseEntity<ApiResponse> deleteGroup(
            @PathVariable Long groupId,
            HttpSession session) { // ‚≠êÔ∏è T·ªêI ∆ØU: D√πng session
        Long userId = getAuthenticatedUserId(session);
        // ‚≠êÔ∏è T·ªêI ∆ØU: Xo√° try-catch
        String message = groupService.deleteGroup(groupId, userId);
        return ResponseEntity.ok(new ApiResponse(true, message));
    }

    /**
     * Ch·∫•p nh·∫≠n y√™u c·∫ßu tham gia (admin nh√≥m)
     */
    @PostMapping("/requests/{requestId}/accept")
    public ResponseEntity<ApiResponse> acceptJoinRequest(
            @PathVariable Long requestId,
            HttpSession session) { // ‚≠êÔ∏è T·ªêI ∆ØU: D√πng session
        Long userId = getAuthenticatedUserId(session); // userId c·ªßa admin nh√≥m
        // ‚≠êÔ∏è T·ªêI ∆ØU: Xo√° try-catch
        String message = groupService.acceptJoinRequest(requestId, userId);
        return ResponseEntity.ok(new ApiResponse(true, message));
    }

    /**
     * X√≥a th√†nh vi√™n kh·ªèi nh√≥m (admin nh√≥m)
     */
    @DeleteMapping("/{groupId}/members/{memberId}")
    public ResponseEntity<ApiResponse> removeMember(
            @PathVariable Long groupId,
            @PathVariable Long memberId,
            HttpSession session) { // ‚≠êÔ∏è T·ªêI ∆ØU: D√πng session
        Long userId = getAuthenticatedUserId(session); // userId c·ªßa admin nh√≥m
        // ‚≠êÔ∏è T·ªêI ∆ØU: Xo√° try-catch
        String message = groupService.removeMember(groupId, memberId, userId);
        return ResponseEntity.ok(new ApiResponse(true, message));
    }

    /**
     * L·∫•y danh s√°ch th√†nh vi√™n trong nh√≥m
     */
    @GetMapping("/{groupId}/members")
    public ResponseEntity<List<GroupMemberResponse>> getGroupMembers(
            @PathVariable Long groupId,
            HttpSession session) { // ‚≠êÔ∏è T·ªêI ∆ØU: D√πng session
        Long userId = getAuthenticatedUserId(session); // userId c·ªßa ng∆∞·ªùi xem
        // ‚≠êÔ∏è T·ªêI ∆ØU: Xo√° try-catch
        return ResponseEntity.ok(groupService.getGroupMembers(groupId, userId));
    }

    /**
     * L·∫•y th√¥ng tin chi ti·∫øt m·ªôt th√†nh vi√™n
     */
    @GetMapping("/{groupId}/members/{memberId}")
    public ResponseEntity<GroupMemberResponse> getGroupMemberById(
            @PathVariable Long groupId,
            @PathVariable Long memberId,
            HttpSession session) { // ‚≠êÔ∏è T·ªêI ∆ØU: D√πng session
        Long userId = getAuthenticatedUserId(session); // userId c·ªßa ng∆∞·ªùi xem

        // ‚≠êÔ∏è T·ªêI ∆ØU: Service s·∫Ω n√©m l·ªói n·∫øu ko t√¨m th·∫•y
        GroupMemberResponse member = groupService.getGroupMemberById(groupId, memberId, userId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y th√†nh vi√™n n√†y"));
        return ResponseEntity.ok(member);
    }
}