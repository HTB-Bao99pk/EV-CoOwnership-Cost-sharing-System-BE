package swp302.topic6.evcoownership.controller;

import java.util.List;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*; // ‚≠êÔ∏è T·ªêI ∆ØU: Xo√° CrossOrigin

import jakarta.servlet.http.HttpSession; // ‚≠êÔ∏è T·ªêI ∆ØU: D√πng Session
import lombok.RequiredArgsConstructor;
import swp302.topic6.evcoownership.dto.AdminRequestResponse;
import swp302.topic6.evcoownership.dto.ApiResponse;
import swp302.topic6.evcoownership.dto.CancelRequestBody;
import swp302.topic6.evcoownership.dto.GroupSettingsRequest;
import swp302.topic6.evcoownership.entity.CoOwnershipGroup;
import swp302.topic6.evcoownership.entity.GroupMember;
import swp302.topic6.evcoownership.entity.User;
import swp302.topic6.evcoownership.service.AdminService;
import swp302.topic6.evcoownership.utils.SessionUtils; // ‚≠êÔ∏è T·ªêI ∆ØU: D√πng SessionUtils

@RestController
@RequestMapping("/api/admin")
@RequiredArgsConstructor
// ‚≠êÔ∏è T·ªêI ∆ØU: Xo√° @CrossOrigin(origins = "http://localhost:3000")
public class AdminController {

    private final AdminService adminService;
    private final SessionUtils sessionUtils; // ‚≠êÔ∏è T·ªêI ∆ØU: Ti√™m SessionUtils

    /**
     * ‚≠êÔ∏è T·ªêI ∆ØU: H√†m helper ki·ªÉm tra quy·ªÅn Admin
     * N√©m l·ªói n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c kh√¥ng ph·∫£i admin
     */
    private Long getAdminUserId(HttpSession session) {
        Long adminId = sessionUtils.getUserId(session);
        String role = sessionUtils.getRole(session);

        if (adminId == null) {
            throw new RuntimeException("Vui l√≤ng ƒëƒÉng nh·∫≠p!");
        }
        if (!"admin".equalsIgnoreCase(role)) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ch·ª©c nƒÉng n√†y!");
        }
        return adminId;
    }


    // ====== 1Ô∏è‚É£ Duy·ªát nh√≥m ======
    @GetMapping("/pending-groups")
    public ResponseEntity<List<CoOwnershipGroup>> getPendingGroups(HttpSession session) {
        getAdminUserId(session); // Ch·ªâ c·∫ßn check quy·ªÅn
        return ResponseEntity.ok(adminService.getPendingGroups());
    }

    @PostMapping("/approve-group")
    public ResponseEntity<ApiResponse> approveGroup(@RequestParam Long groupId,
                                                    @RequestParam boolean approved,
                                                    @RequestParam(required = false) String reason,
                                                    HttpSession session) {
        // ‚≠êÔ∏è T·ªêI ∆ØU: L·∫•y adminId t·ª´ session an to√†n
        Long adminId = getAdminUserId(session);

        String message;
        if (approved) {
            // ‚≠êÔ∏è T·ªêI ∆ØU: Xo√° try-catch
            message = adminService.approveGroup(groupId, adminId);
        } else {
            // ‚≠êÔ∏è T·ªêI ∆ØU: N√©m l·ªói n·∫øu thi·∫øu l√Ω do
            if (reason == null || reason.trim().isEmpty()) {
                throw new RuntimeException("L√Ω do t·ª´ ch·ªëi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
            }
            message = adminService.rejectGroup(groupId, reason, adminId);
        }
        return ResponseEntity.ok(new ApiResponse(true, message));
    }

    // ====== 2Ô∏è‚É£ Duy·ªát th√†nh vi√™n ======
    @GetMapping("/pending-members")
    public ResponseEntity<List<GroupMember>> getPendingMembers(HttpSession session) {
        getAdminUserId(session); // Check quy·ªÅn
        return ResponseEntity.ok(adminService.getPendingMembers());
    }

    @PostMapping("/approve-member")
    public ResponseEntity<ApiResponse> approveMember(@RequestParam Long memberId,
                                                     @RequestParam boolean approved,
                                                     @RequestParam(required = false) String reason,
                                                     HttpSession session) {
        getAdminUserId(session); // Check quy·ªÅn

        String message;
        if (approved) {
            message = adminService.approveMember(memberId);
        } else {
            if (reason == null || reason.trim().isEmpty()) {
                throw new RuntimeException("L√Ω do t·ª´ ch·ªëi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
            }
            message = adminService.rejectMember(memberId, reason);
        }
        return ResponseEntity.ok(new ApiResponse(true, message));
    }

    // ====== 4Ô∏è‚É£ C·∫≠p nh·∫≠t c·∫•u h√¨nh nh√≥m (maxMembers, minOwnershipPercentage)
    @PostMapping("/group/{groupId}/settings")
    public ResponseEntity<ApiResponse> updateGroupSettings(@PathVariable Long groupId,
                                                           @RequestBody GroupSettingsRequest req,
                                                           HttpSession session) {
        getAdminUserId(session); // Check quy·ªÅn
        String res = adminService.updateGroupSettings(groupId, req.getMaxMembers(), req.getMinOwnershipPercentage());
        return ResponseEntity.ok(new ApiResponse(true, res));
    }

    // ====== 3Ô∏è‚É£ Duy·ªát x√°c minh t√†i kho·∫£n ======
    @GetMapping("/pending-users")
    public ResponseEntity<List<User>> getPendingUsers(HttpSession session) {
        getAdminUserId(session); // Check quy·ªÅn
        return ResponseEntity.ok(adminService.getPendingUsers());
    }

    @PostMapping("/verify-user")
    public ResponseEntity<ApiResponse> verifyUser(@RequestParam Long userId,
                                                  @RequestParam boolean approved,
                                                  @RequestParam(required = false) String reason,
                                                  HttpSession session) {
        getAdminUserId(session); // Check quy·ªÅn

        String message;
        if (approved) {
            message = adminService.verifyUser(userId);
        } else {
            if (reason == null || reason.trim().isEmpty()) {
                throw new RuntimeException("L√Ω do t·ª´ ch·ªëi x√°c minh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
            }
            message = adminService.rejectUserVerification(userId, reason);
        }
        return ResponseEntity.ok(new ApiResponse(true, message));
    }

    // ===== Admin user management (list/get/approve/reject/delete)
    @GetMapping("/users")
    public ResponseEntity<List<User>> listUsers(HttpSession session) {
        getAdminUserId(session); // Check quy·ªÅn
        return ResponseEntity.ok(adminService.getAllUsers());
    }

    @GetMapping("/users/{id}")
    public ResponseEntity<User> getUser(@PathVariable Long id, HttpSession session) {
        getAdminUserId(session); // Check quy·ªÅn
        // ‚≠êÔ∏è T·ªêI ∆ØU: Service s·∫Ω n√©m l·ªói n·∫øu kh√¥ng t√¨m th·∫•y
        User user = adminService.getUserById(id)
                .orElseThrow(() -> new RuntimeException("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!"));
        return ResponseEntity.ok(user);
    }

    @PostMapping("/users/{id}/approve")
    public ResponseEntity<ApiResponse> approveUser(@PathVariable Long id, HttpSession session) {
        getAdminUserId(session); // Check quy·ªÅn
        return ResponseEntity.ok(new ApiResponse(true, adminService.approveUser(id)));
    }

    @PostMapping("/users/{id}/reject")
    public ResponseEntity<ApiResponse> rejectUser(@PathVariable Long id, HttpSession session) {
        getAdminUserId(session); // Check quy·ªÅn
        return ResponseEntity.ok(new ApiResponse(true, adminService.rejectUser(id)));
    }

    @PostMapping("/users/{id}/delete")
    public ResponseEntity<ApiResponse> deleteUser(@PathVariable Long id, HttpSession session) {
        getAdminUserId(session); // Check quy·ªÅn
        return ResponseEntity.ok(new ApiResponse(true, adminService.deleteUser(id)));
    }


    // ====== üÜï Request Management APIs ======

    /**
     * ‚≠êÔ∏è T·ªêI ∆ØU: ƒê√£ xo√° c√°c API tr√πng l·∫∑p (getAllRequests, getRequestById, acceptRequest, cancelRequest)
     * v√¨ ch√∫ng tr√πng l·∫∑p ch·ª©c nƒÉng v·ªõi c√°c API /approve-member v√† /pending-members ·ªü tr√™n.
     * Gi·ªØ code ƒë∆°n gi·∫£n, m·ªói ch·ª©c nƒÉng ch·ªâ n√™n c√≥ 1 API.
     */
}